1.public class SumOfArray {  
    public static void main(String[] args) {  
        //Initialize array  
        int [] arr = new int [] {1, 2, 3, 4, 5};  
        int sum = 0;  
        //Loop through the array to calculate sum of elements  
        for (int i = 0; i < arr.length; i++) {  
           sum = sum + arr[i];  
        }  
        System.out.println("Sum of all the elements of an array: " + sum);  
    }  
}  


2.import java.util.ArrayList;

import java.util.Arrays;

import java.util.List;

 

public class AddElementAtPositionInArray {

     

    // Method to add element at position

    private static void addElement(

        Integer[] arr, int element,

        int position)

    {

        // Converting array to ArrayList

        List<Integer> list = new ArrayList<>(

            Arrays.asList(arr));

         

        // Adding the element at position

        list.add(position - 1, element);

         

        // Converting the list back to array

        arr = list.toArray(arr);

 

        // Printing the original array

        System.out.println("Initial Array:\n"

                        + Arrays.toString(arr));

 

        // Printing the updated array

        System.out.println("\nArray with " + element

                        + " inserted at position "

                        + position + ":\n"

                        + Arrays.toString(arr));

    }

     

    // Drivers Method

    public static void main(String[] args)

    {

        // Sample array

        Integer[] arr = { 1, 2, 3, 4, 5,

                        6, 7, 8, 9, 10 };

     

        // Element to be inserted

        int element = 50;

     

        // Position to insert

        int position = 5;

     

        // Calling the function to insert

        addElement(arr, element, position);

    }

}


3.import java.io.*;
 
class GFG {
 
    static int getMin(int arr[], int n)
    {
        int res = arr[0];
        for (int i = 1; i < n; i++)
            res = Math.min(res, arr[i]);
        return res;
    }
 
    static int getMax(int arr[], int n)
    {
        int res = arr[0];
        for (int i = 1; i < n; i++)
            res = Math.max(res, arr[i]);
        return res;
    }
 
    // Driver code
    public static void main(String[] args)
    {
        int arr[] = { 12, 1234, 45, 67, 1 };
        int n = arr.length;
        System.out.println("Minimum element of array: " + getMin(arr, n));
        System.out.println("Maximum element of array: " + getMax(arr, n));
    }
}

4.public class ReverseArray {  
    public static void main(String[] args) {  
        //Initialize array  
        int [] arr = new int [] {1, 2, 3, 4, 5};  
        System.out.println("Original array: ");  
        for (int i = 0; i < arr.length; i++) {  
            System.out.print(arr[i] + " ");  
        }  
        System.out.println();  
        System.out.println("Array in reverse order: ");  
        //Loop through the array in reverse order  
        for (int i = arr.length-1; i >= 0; i--) {  
            System.out.print(arr[i] + " ");  
        }  
    }  
}  

5.import java.util.*;
 
class GFG {
 
    // Function to remove duplicate from array
    public static void removeDuplicates(int[] a)
    {
        LinkedHashSet<Integer> set
            = new LinkedHashSet<Integer>();
 
        // adding elements to LinkedHashSet
        for (int i = 0; i < a.length; i++)
            set.add(a[i]);
 
        // Print the elements of LinkedHashSet
        System.out.print(set);
    }
 
    // Driver code
    public static void main(String[] args)
    {
        int a[] = {5,2,6,8,6,7,5,2,8};
     
        // Function call
        removeDuplicates(a);
    }
}

6.public class DuplicateElement {  
    public static void main(String[] args) {      
          
        //Initialize array   
        int [] arr = new int [] {1, 2, 3, 4, 2, 7, 8, 8, 3};   
          
        System.out.println("Duplicate elements in given array: ");  
        //Searches for duplicate element  
        for(int i = 0; i < arr.length; i++) {  
            for(int j = i + 1; j < arr.length; j++) {  
                if(arr[i] == arr[j])  
                    System.out.println(arr[j]);  
            }  
        }  
    }  
}  

7.public class MatrixAdditionExample{  
public static void main(String args[]){  
//creating two matrices    
int a[][]={{1,3,4},{2,4,3},{3,4,5}};    
int b[][]={{1,3,4},{2,4,3},{1,2,4}};    
    
//creating another matrix to store the sum of two matrices    
int c[][]=new int[3][3];  //3 rows and 3 columns  
    
//adding and printing addition of 2 matrices    
for(int i=0;i<3;i++){    
for(int j=0;j<3;j++){    
c[i][j]=a[i][j]+b[i][j];    //use - for subtraction  
System.out.print(c[i][j]+" ");    
}    
System.out.println();//new line    
}    
}}  



8. public class MatrixTransposeExample{  
public static void main(String args[]){  
//creating a matrix  
int original[][]={{1,3,4},{2,4,3},{3,4,5}};    
    
//creating another matrix to store transpose of a matrix  
int transpose[][]=new int[3][3];  //3 rows and 3 columns  
    
//Code to transpose a matrix  
for(int i=0;i<3;i++){    
for(int j=0;j<3;j++){    
transpose[i][j]=original[j][i];  
}    
}    
  
System.out.println("Printing Matrix without transpose:");  
for(int i=0;i<3;i++){    
for(int j=0;j<3;j++){    
System.out.print(original[i][j]+" ");    
}    
System.out.println();//new line    
}    
System.out.println("Printing Matrix After Transpose:");  
for(int i=0;i<3;i++){    
for(int j=0;j<3;j++){    
System.out.print(transpose[i][j]+" ");    
}    
System.out.println();//new line    
}    
}}  


9.public class JaggedArrayExample {  
    public static void main(String[] args) {  
          
        // create a jagged array with three rows  
        int[][] jaggedArray = {  
            {1, 2, 3},   // first row has three columns  
            {4, 5},      // second row has two columns  
            {6, 7, 8, 9} // third row has four columns  
        };  
          
        // loop through each row of the jagged array  
        for (int i = 0; i < jaggedArray.length; i++) {  
              
            // loop through each column of the current row  
            for (int j = 0; j < jaggedArray[i].length; j++) {  
                  
                // print the value at the current position in the array  
                System.out.print(jaggedArray[i][j] + " ");  
            }  
              
            // move to the next line for the next row  
            System.out.println();  
        }  
    }  
}  


10.
class GFG {
    public static void main(String[] args)
    {
 
        // create a StringBuilder object
        // with a String pass as parameter
        StringBuilder
            str
            = new StringBuilder("WelcomeGeeks");
 
        // print string
        System.out.println("Before removal String = "
                           + str.toString());
 
        // remove the substring from index 2 to 8
        StringBuilder afterRemoval = str.delete(2, 8);
 
        // print string after removal of substring
        System.out.println("After removal String = "
                           + afterRemoval.toString());
    }
}